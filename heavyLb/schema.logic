// Companies are identified by a name of type string.
Company(c), hasCompanyName(c:n) -> string(n).

// Departments are identified by a name of type string.
Department(d), hasDepartmentName(d:n) -> string(n).

// Each department belongs to a specific company.
companyOf[d] = c -> Department(d), Company(c).

// In fact, each department must belong to a company.
Department(d) -> companyOf[d] = _.

// Each department may have an ancestor department.
ancestorOf[d1] = d2 -> Department(d1), Department(d2).

// Employees are identified by a name of type string.
Employee(e), hasEmployeeName(e:n) -> string(n).

// Each employee may be associated with a department.
departmentOf[e] = d -> Employee(e), Department(d).

// In fact, each employee must have an associated department.
Employee(e) -> departmentOf[e] = _.

// Each employee has an employer.
employerOf[e] = c <- departmentOf[e] = d, companyOf[d] = c.

// Each department may have an employee who is the manager.
managerOf[d] = m -> Department(d), Employee(m), departmentOf[m] = d.

// In fact, each department must have a manager.
Department(d) -> managerOf[d] = _.

// Each employee may receive a salary.
salaryOf[e] = s -> Employee(e), float[32](s).

// In fact, each employee must receive a salary.
Employee(e) -> salaryOf[e] = _.

// Each employee may have a mentor (in the same company or not).
mentorOf[tee] = tor -> Employee(tee), Employee(tor).

// Each employee may have several mentees.
menteeOf(tor,tee) -> Employee(tor), Employee(tee).

// mentorOf and menteeOf are compatible one way.
mentorOf[tee] = tor -> menteeOf(tor,tee).

// mentorOf and menteeOf are compatible the other way.
menteeOf(tor,tee) -> mentorOf[tee] = tor.

// In fact, menteeOf is derived from mentorOf.
menteeOf(tor,tee) <- mentorOf[tee] = tor.

// One must not mentor her- or himself.
mentorOf[tee] = tor -> ! tor = tee.

